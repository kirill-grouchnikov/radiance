/*
 * Copyright (c) 2005-2020 Radiance Kirill Grouchnikov. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  o Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  o Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 *  o Neither the name of the copyright holder nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

version = '3.0-SNAPSHOT'
ext.codename = 'Diamond'
ext.isRelease = false

buildscript {
    ext {
        kotlin_version = '1.3.71'
        kotlinx_coroutines_version = '1.3.5'
        gradle_nexus_plugin_version = '2.3.1'
        dokka_plugin_version = '0.10.1'
        batik_version = '1.12'
        retrofit_version = '2.8.0'
        gradle_versions_plugin_version = '0.28.0'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${rootProject.ext.kotlin_version}"
        classpath "com.bmuschko:gradle-nexus-plugin:${rootProject.ext.gradle_nexus_plugin_version}"
        classpath "com.github.ben-manes:gradle-versions-plugin:${rootProject.ext.gradle_versions_plugin_version}"
    }
}

wrapper {
    gradleVersion = "6.3"
}

allprojects {
    version = rootProject.version

    repositories {
        mavenCentral()
        jcenter()
    }

    defaultTasks 'build', 'jar'

    // Configure Java compilation for all the projects
    tasks.withType(JavaCompile) {
        def javaVersion = JavaVersion.VERSION_1_9
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion

        // flag all usage of deprecated APIs as errors
        options.deprecation = true
        options.compilerArgs += ['-Werror']

        clean {
            delete 'out'     // interpreted relative to the project directory
        }

        disableAutoTargetJvm()
    }

    // Configure the jar task for all the projects
    tasks.withType(Jar) {
        // create reproducible builds by removing timestamps and doing cross-platform file order
        preserveFileTimestamps = false
        reproducibleFileOrder = true

        manifest {
            // add radiance version, build JDK and build JDK vendor into the manifest file
            attributes("Radiance-Version": "${rootProject.version} [${rootProject.ext.codename}]",    \
                 "Build-JDK": System.getProperty('java.version'),    \
                 "Build-JDK-Vendor": System.getProperty('java.vendor'))
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
}

subprojects {
    task allDeps(type: DependencyReportTask) {}
}

// To generate report about available dependency updates, run
// ./gradlew dependencyUpdates  -Drevision=release
apply plugin: "com.github.ben-manes.versions"

// Copies the compiled jars from all the modules into the drop folder. The compiled
// jars are grouped into three folders: 'core' for app-facing modules (such as Trident,
// Neon, Substance, Flamingo), 'demo' for modules that have demos and 'tools' for
// modules with various tools.
task copyJars(type: Copy) {
    delete "drop/${project.version}"
    subprojects {
        project ->
            project.afterEvaluate {
                copy {
                    def projectName = project.name
                    if (projectName.startsWith("demos/") || projectName.startsWith("tools/")) {
                        projectName = projectName.substring(6)
                    }
                    from file("${project.buildDir}/libs/${rootProject.name}-${projectName}-${project.version}.jar")
                    into file("drop/${project.version}/${project.designation}")
                }
            }
    }
}

// Collects all the dependencies of the core modules in build/libs-core
task getCoreDependencies(type: Copy) {
    into 'build/libs-core'
    from {
        subprojects.findAll { it.designation == "core" && it.name != "kotlin-ext" }.collect { it.configurations.compileClasspath }
    }
    doLast {
        println("Copied all core dependencies to build/libs-core")
    }
}

// Collects all the dependencies of the demo modules in build/libs-demo
task getDemoDependencies(type: Copy) {
    into 'build/libs-demo'
    from {
        subprojects.findAll { it.designation == "demo" && it.name != "demos" }.collect { it.configurations.compileClasspath }
    }
    doLast {
        println("Copied all demo dependencies to build/libs-demo")
    }
}

// Collects all the dependencies of the demo modules in build/libs-demo
task getToolsDependencies(type: Copy) {
    into 'build/libs-tools'
    from {
        subprojects.findAll { it.designation == "tools" && it.name != "tools" }.collect { it.configurations.compileClasspath }
    }
    doLast {
        println("Copied all tools dependencies to build/libs-tools")
    }
}

task getAllDependencies(type: Copy, dependsOn: [getCoreDependencies, getDemoDependencies, getToolsDependencies])

task printRuntimeDependencies {
    doLast {
        println "Project runtime dependencies:"
        allprojects.each { p ->
            println()
            println " $p.name ".center(45, '-')
            p.configurations.findAll { it.name == "runtimeClasspath" }.findAll { !it.allDependencies.empty }.each { c ->
                c.allDependencies.each { dep ->
                    if (dep.group != null) {
                        println "$dep.group:$dep.name:$dep.version"
                    }
                }
            }
        }
    }
}
